Interface entre la réception des messages et le stockage
=======================================================

Le projet est divisé de la manière suivante : 


  +------+       +-------+       +------+
  | Back |<--+-->| Front |<--+-->|Client|
  +------+   |   +-------+   |   +------+
             |               |
             V               V
            Ici          Voir api-draft.md


I. Le Back-end et le Front-end
------------------------------

Le rôle du back-end est de gérer le stockage des messages. Lorsqu'un client envoie un message, celui-ci est réceptionné par la partie 'Front' du projet. Le Front-end se charge de le transmettre au Back-end. De même quand un client demande un ensemble de message, c'est le Front-end qui procède à l'envoi. De manière générale, le Front-end fait l'interface entre le client et le stockage.

II. L'interface IStorage
------------------------

L'interface IStorage est implémentée par le Back-end. Elle définie notamment les méthodes d'ajout et de requête de message.


                          IStorage
         +------------------------------------------------------------+
         |                                  +------------+            |
         |                                  |Request List|            |
         |                                  +------------+            |
         |                                     A                      |
         |                                     |Requests              |
requests |  +-------------------+           +----------+              |
  --------->| Stream Controller |------+--->| Producer |--------+     |
         |  +-----------------+-+      |    +----------+        |     |
         |                    |        +---->   ...             |     |
         |                    |        +---->   ...             |     |
         |                    |                                 |     |
         |                    |             +----------+        |     |
         |                    +--------+--->| Reader   |----+   |     |
         |                             |    +----------+    |   |     |
         |                             +---->   ...         |   |     |
         |                             +---->   ...         |   |     |
         |                                                  |   |     |
feedback |  +--------------------+                          |   |     |
  <---------| Stream Deliver     |<-------------------------+   |     |
         |  +--------------------+                              |     |
         |                    A                                 |     |
         |                    +---------------------------------+     |
         |                                                            |
         +------------------------------------------------------------+


Toutes les requêtes viennent du front-end. Elles sont réparties entre 
un ensemble de Producer (pour ce qui est de l'écriture) et un ensemble 
de Reader (pour ce qui est de la lecture) par un controlleur (Stream 
Controller). 

Toutes les opérations sont asynchrones. Faire une requête ne retourne
rien. Une fois que la requête traitée, le Producer ou le Reader en 
informe le Stream Deliver qui envoie un feedback au front-end 
(C'est-à-dire soit un ACK, soit les messages demandés).

On utilise le pattern "Fire and forget". Une fois que le front-end fait 
une requête, il sait qu'il va obtenir une réponse. Il n'a pas besoin de 
l'attendre. 

 --> Permet facilement de paralleliser, le controlleur gère qui écrit où,
 mais il ne fait pas d'opérations couteuses. Tous les blocs sont indépendants
